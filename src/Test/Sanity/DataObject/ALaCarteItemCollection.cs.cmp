using System;

namespace Golf.Tournament.DataObject {
    /// <summary>
    /// ALaCarteItemData generic collection
    /// </summary>
    public class ALaCarteItemCollection : System.Collections.CollectionBase {
	public static readonly ALaCarteItemCollection UNSET = new ALaCarteItemCollection(true);
	public static readonly ALaCarteItemCollection DEFAULT = new ALaCarteItemCollection(true);

	private Boolean immutable = false;

	private ALaCarteItemCollection (Boolean immutable) {
	        this.immutable = immutable;
	}

	public ALaCarteItemCollection() {
	}

	// Indexer implementation.
	public ALaCarteItemData this[int index] {
	    get { return (ALaCarteItemData) List[index]; }
	}

	public void Add(ALaCarteItemData a) {
	    if (!immutable) {
		List.Add(a);
	    } else {
		throw new System.Data.ReadOnlyException();
	    }
	}

	public void Remove(int index) {
	    if (!immutable) {
		if (index > Count - 1 || index < 0) {
		    throw new IndexOutOfRangeException();
		} else {
		    List.RemoveAt(index); 
		}
	    } else {
		throw new System.Data.ReadOnlyException();
	    }
	}

	public void AddRange(System.Collections.IList list) {
	    foreach(Object o in list) {
		if (o is ALaCarteItemData) {
		    Add((ALaCarteItemData)o);
		} else {
		    throw new System.InvalidCastException("object in list could not be cast to ALaCarteItemData");
		}
	    }
	}

    }
}

