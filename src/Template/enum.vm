using System;
using System.Collections;

namespace $options.GetTypeNameSpace($element.Name) {

    public class $element.Name : $options.EnumBaseClass {

	private static readonly ArrayList OPTIONS = new ArrayList();

	public static readonly new $element.Name DEFAULT = new ${element.Name}();
	public static readonly new $element.Name UNSET = new ${element.Name}();

#foreach ($value in $element.Values)
#if ( $value.Description > "" )
	/// <summary>
	/// $value.Description
	/// </summary>
#end
#set ($s = $value.Name.Replace(' ','_').ToUpper() )
	public static readonly $element.Name $s = new ${element.Name}("$value.Code", "$value.Name");
#end

	public static $element.Name GetInstance(Object value) {
	    if (value is String) {
		foreach ($element.Name t in OPTIONS) {
		    if (t.Value.Equals(value)) {
			return t;
		    }
		}
	    }

#if ( $element.IntegerBased )
	    if (value is Int32) {
		foreach ($element.Name t in OPTIONS) {
		    try {
			if (Int32.Parse(t.Code).Equals(value)) {
			    return t;
			}
		    } catch (Exception) {
			// parse exception - continue
		    }
		}
	    }
#end
	    return UNSET;
	}

	private ${element.Name}() {}

	private ${element.Name}(String code, String name) {
	    this.code = code;
	    this.name = name;
	    OPTIONS.Add(this);
	}

	public override Boolean IsDefault {
	    get { return Object.ReferenceEquals(this, DEFAULT); }
	}

	public override Boolean IsUnset {
	    get { return Object.ReferenceEquals(this, UNSET); }
	}

	public static IList Options {
	    get { return OPTIONS; }
	}
#if ( $element.IntegerBased )

	/// <summary>
	/// Convert a $element.Name instance to an Int32;
	/// </summary>
	/// <returns>the Int32 representation for the enum instance.</returns>
	/// <exception cref=\"InvalidCastException\">when converting DEFAULT or UNSET to an Int32.</exception>
	public Int32 ToInt32() {
	    if (IsValid) {
		try {
		    return Int32.Parse(code);
		} catch (Exception) {
		    // parse error  - don't do anything - an acceptable exception will be thrown below
		}
	    }

	    // instance was !IsValid or there was a parser error
	    throw new InvalidCastException(); 
	}
#end
    }
}
