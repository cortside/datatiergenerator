##
##      dao.vm - default dao template for C#
##	Customized for SeamlessWeb on 1/18/2005 by Cort to use more paramaterized queries
##
##      NOTE: this template may have some screwy things in it to EXACTLY match the ouput of the 
##      DaoGenerator class.
##
#if(!$element.SqlEntity.Name.Equals(""))
#set ($namespaces = "#nameSpaces($options $element true)")
$namespaces
#if ($namespaces.IndexOf("${options.RootNameSpace}.Types") < 0)
using ${options.RootNameSpace}.Types;

#end
namespace $options.GetDAONameSpace($element.Name) {
    public class $options.GetDAOClassName($element.Name) : $options.DaoBaseClass {

#if($element.SqlEntity.UseView)
	private static readonly String VIEW = "$element.SqlEntity.View";
#else
	private static readonly String VIEW = "[$element.SqlEntity.Name]";
#end
	private static readonly String CONNECTION_STRING_KEY = "$element.SqlEntity.Key";
#if($element.SqlEntity.GenerateInsertStoredProcScript || $element.SqlEntity.GenerateUpdateStoredProcScript || $element.SqlEntity.GenerateDeleteStoredProcScript)
	private static readonly Int32 COMMAND_TIMEOUT = $element.SqlEntity.CommandTimeout;
#end
###set ($listtype = "void")
###if($options.GenerateAllCollections)
#set ($listtype = "${element.Name}List")
###else
###set ($listtype="IList")
###end

	/// <summary>
	/// Hash table mapping entity property names to sql code.
	/// </summary>
	private static Hashtable propertyToSqlMap = new Hashtable();

	/// <summary>
	/// Initializes the static map of property names to sql expressions.
	/// </summary>
	static ${options.GetDAOClassName($element.Name)}() {
#foreach($field in $element.fields)
#if($field.Column.SqlType.Name.Length>0)
	    if (!propertyToSqlMap.Contains("$field.GetMethodFormat()")) {
		propertyToSqlMap.Add("$field.GetMethodFormat()",@"$field.GetSqlExpression(true)");
	    }
#end
#end		
	}
	
	/// <summary>
	/// Creates a where clause object by mapping the given where clause text.  The text may reference
	/// entity properties which will be mapped to sql code by enclosing the property names in braces.
	/// </summary>
	/// <param name="whereText">Text to be mapped</param>
	/// <returns>WhereClause object.</returns>
	/// <exception cref="ApplicationException">When property name found in braces is not found in the entity.</exception>
	public static IWhere Where(String whereText) {
	    return new WhereClause(ProcessExpression(propertyToSqlMap, whereText));
	}

	/// <summary>
	/// Creates a where clause object that can be used to create sql to find objects whose entity property value
	/// matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
	/// to the appropriate sql.
	/// </summary>
	/// <param name="propertyName">Entity property to be matched.</param>
	/// <param name="value">Value to match the property with</param>
	/// <returns>A WhereClause object.</returns>
	/// <exception cref="ApplicationException">When the property name passed is not found in the entity.</exception>
	public static IWhere Where(String propertyName, String value) {
	    return new WhereClause(GetPropertyMapping(propertyToSqlMap, propertyName), value);
	}

	/// <summary>
	/// Creates a where clause object that can be used to create sql to find objects whose entity property value
	/// matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
	/// to the appropriate sql.
	/// </summary>
	/// <param name="propertyName">Entity property to be matched.</param>
	/// <param name="value">Value to match the property with</param>
	/// <returns>A WhereClause object.</returns>
	/// <exception cref="ApplicationException">When the property name passed is not found in the entity.</exception>
	public static IWhere Where(String propertyName, Int32 value) {
	    return new WhereClause(GetPropertyMapping(propertyToSqlMap, propertyName), value);
	}

	/// <summary>
	/// Creates a where clause object that can be used to create sql to find objects whose entity property value
	/// matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
	/// to the appropriate sql.
	/// </summary>
	/// <param name="propertyName">Entity property to be matched.</param>
	/// <param name="value">Value to match the property with</param>
	/// <returns>A WhereClause object.</returns>
	/// <exception cref="ApplicationException">When the property name passed is not found in the entity.</exception>
	public static IWhere Where(String propertyName, DateTime value)	{
	    return new WhereClause(GetPropertyMapping(propertyToSqlMap, propertyName), value);
	}

	/// <summary>
	/// Returns a list of all $element.Name rows.
	/// </summary>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
	public static $listtype GetList() { 
	    return GetList(null, null);
	}

	/// <summary>
	/// Returns a filtered list of $element.Name rows.
	/// </summary>
	/// <param name="whereClause">Filtering criteria.</param>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
	public static $listtype GetList(IWhere whereClause) { 
	    return GetList(whereClause, null);
	}

	/// <summary>
	/// Returns an ordered list of $element.Name rows.  All rows in the database are returned
	/// </summary>
	/// <param name="orderByClause">Ordering criteria.</param>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
	public static $listtype GetList(IOrderBy orderByClause) { 
	    return GetList(null, orderByClause);
	}

	/// <summary>
	/// Returns an ordered and filtered list of $element.Name rows.
	/// </summary>
	/// <param name="whereClause">Filtering criteria.</param>
	/// <param name="orderByClause">Ordering criteria.</param>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
	public static $listtype GetList(IWhere whereClause, IOrderBy orderByClause) { 
	    SqlDataReader dataReader = GetListReader(CONNECTION_STRING_KEY, VIEW, whereClause, orderByClause); 

	    $listtype list = new #if($listtype=="IList")ArrayList#else$listtype#end(); 
	    while (dataReader.Read()) { 
		list.Add(GetDataObjectFromReader(dataReader)); 
	    }
	    dataReader.Close();
	    return list; 
	}

	/// <summary>
	/// Returns a list of all $element.Name rows.
	/// </summary>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
	public static $listtype GetList(Int32 maxRows) { 
	    return GetList(null, null, maxRows);
	}

	/// <summary>
	/// Returns a filtered list of $element.Name rows.
	/// </summary>
	/// <param name="whereClause">Filtering criteria.</param>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
	public static $listtype GetList(IWhere whereClause, Int32 maxRows) { 
	    return GetList(whereClause, null, maxRows);
	}

	/// <summary>
	/// Returns an ordered list of $element.Name rows.  All rows in the database are returned
	/// </summary>
	/// <param name="orderByClause">Ordering criteria.</param>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
	public static $listtype GetList(IOrderBy orderByClause, Int32 maxRows) { 
	    return GetList(null, orderByClause, maxRows);
	}

	/// <summary>
	/// Returns an ordered and filtered list of $element.Name rows.
	/// </summary>
	/// <param name="whereClause">Filtering criteria.</param>
	/// <param name="orderByClause">Ordering criteria.</param>
	/// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
	public static $listtype GetList(IWhere whereClause, IOrderBy orderByClause, Int32 maxRows) { 
	    SqlDataReader dataReader = GetListReader(CONNECTION_STRING_KEY, VIEW, whereClause, orderByClause, maxRows); 

	    $listtype list = new #if($listtype=="IList")ArrayList#else$listtype#end();
	    while (dataReader.Read()) { 
		list.Add(GetDataObjectFromReader(dataReader)); 
	    }
	    dataReader.Close();
	    return list; 
	}

	/// <summary>
	/// Finds a $element.Name entity using it's primary key.
	/// </summary>
#parameterComments(true $element.GetPrimaryKeyFields() "A key field.")
	/// <returns>A $options.GetDOClassName($element.Name) object.</returns>
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no entity exists witht he specified primary key..</exception>
	public static $options.GetDOClassName($element.Name) Load(#parameterList(true $element.GetPrimaryKeyFields())) {
	    String sql = "SELECT * FROM " + VIEW + " WHERE #foreach ($field in $element.GetPrimaryKeyFields())#if($velocityCount>1) AND #end$field.GetSqlAlias()=@$field.GetSqlAlias()#end";
	    SqlCommand cmd = GetSqlCommand(CONNECTION_STRING_KEY, sql, CommandType.Text);
#foreach ($field in $element.GetPrimaryKeyFields())
	    cmd.Parameters.Add(new SqlParameter("@$field.GetSqlAlias()", $options.GetSqlConversion($field)));
#end
	    SqlDataReader dataReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);

	    if (!dataReader.Read()) {
		dataReader.Close();
		throw new FinderException("Load found no rows for $element.Name.");
	    }
	    $options.GetDOClassName($element.Name) data = GetDataObjectFromReader(dataReader);
	    dataReader.Close();
	    return data;
	}

	/// <summary>
	/// Read through the reader and return a data object list
	/// </summary>
	private static $listtype GetList(SqlDataReader reader) { 
	    $listtype list = new #if($listtype=="IList")ArrayList#else$listtype#end();
	    while (reader.Read()) { 
		list.Add(GetDataObjectFromReader(reader)); 
	    }
	    reader.Close();
	    return list; 
	}

	/// <summary>
	/// Read from reader and return a single data object
	/// </summary>
	private static $options.GetDOClassName($element.Name) GetDataObject(SqlDataReader reader) { 
	    if (!reader.Read()) {
		reader.Close();
		throw new FinderException("$options.GetDOClassName($element.Name).$finder.Name found no rows.");
	    }
	    $options.GetDOClassName($element.Name) data = GetDataObjectFromReader(reader);
	    reader.Close();
	    return data;
	}

	/// <summary>
	/// Builds a data object from the current row in a data reader..
	/// </summary>
	/// <param name="dataReader">Container for database row.</param>
	/// <returns>Data object built from current row.</returns>
	private static $options.GetDOClassName($element.Name) GetDataObjectFromReader(SqlDataReader dataReader) {
	    $options.GetDOClassName($element.Name) data = new $options.GetDOClassName($element.Name)();
#foreach($field in $element.Fields)
#if($field.Column.SqlType.Name.Length>0)
	    if (dataReader.IsDBNull(dataReader.GetOrdinal("$field.GetSqlAlias()"))) { 
		data.${field.GetMethodFormat()} = ${field.Type.NullInstanceFormat};
	    } else {
		data.$field.GetMethodFormat() = $options.GetReaderString($field);
	    }
#end
#end

	    return data;
	}
#if($element.SqlEntity.GenerateInsertStoredProcScript)

	/// <summary>
	/// Inserts a record into the $element.SqlEntity.Name table.
	/// </summary>
	/// <param name=""></param>
#set($s="void")
#if($element.GetIdentityField())
#set($s=${element.GetIdentityField().Type.Name})
#end
	public static $s Insert($options.GetDOClassName($element.Name) data) {
	    #if($element.GetIdentityField())return #end#**#Insert(data, null);
	}
	
	/// <summary>
	/// Inserts a record into the $element.SqlEntity.Name table.
	/// </summary>
	/// <param name=""></param>
#set($s="void")
#if($element.GetIdentityField())
#set($s=${element.GetIdentityField().Type.Name})
#end
	public static $s Insert($options.GetDOClassName($element.Name) data, SqlTransaction transaction) {
	    // Create and execute the command
#set($s="Insert")
	    SqlCommand cmd = GetSqlCommand(CONNECTION_STRING_KEY, "$options.GetProcName($element.SqlEntity.Name, $s)", CommandType.StoredProcedure, COMMAND_TIMEOUT, transaction);

#if($element.GetIdentityField())
	    SqlParameter rv = cmd.Parameters.Add("RETURN_VALUE", SqlDbType.Int);
	    rv.Direction = ParameterDirection.ReturnValue;
#end
	    //Create the parameters and append them to the command object
#foreach($field in $element.Fields)
#if(!$field.Column.ViewColumn && $field.GetSqlAlias().Length>0 && !$field.Column.Identity && !$field.Column.RowGuidCol)	    $field.CreateSqlParameter(false, true)#end
#end

	    // Execute the query
	    cmd.ExecuteNonQuery();

	    // do not close the connection if it is part of a transaction
 	    if (transaction == null) {
 		cmd.Connection.Close();
 	    }

#if($element.GetIdentityField())
	    // Set the output paramter value(s)
	    return $options.GetProcedureReturnString($element.GetIdentityField());
#end
	}
#end
#if($element.SqlEntity.HasUpdatableColumns() && $element.SqlEntity.GenerateUpdateStoredProcScript)

	/// <summary>
	/// Updates a record in the $element.SqlEntity.Name table.
	/// </summary>
	/// <param name=""></param>
	public static void Update($options.GetDOClassName($element.Name) data) {
	    Update(data, null);
	}
	
	/// <summary>
	/// Updates a record in the $element.SqlEntity.Name table.
	/// </summary>
	/// <param name=""></param>
	public static void Update($options.GetDOClassName($element.Name) data, SqlTransaction transaction) {
	    // Create and execute the command
#set($s="Update")
	    SqlCommand cmd = GetSqlCommand(CONNECTION_STRING_KEY, "$options.GetProcName($element.SqlEntity.Name, $s)", CommandType.StoredProcedure, COMMAND_TIMEOUT, transaction);

	    //Create the parameters and append them to the command object
#foreach($field in $element.Fields)
#if(!$field.Column.ViewColumn && $field.GetSqlAlias().Length>0)	    $field.CreateSqlParameter(false, true)#end
#end

	    // Execute the query
	    cmd.ExecuteNonQuery();
	    
	    // do not close the connection if it is part of a transaction
	    if (transaction == null) {
		cmd.Connection.Close();
	    }
	}
#end
#if($element.SqlEntity.GenerateDeleteStoredProcScript)

	/// <summary>
	/// Deletes a record from the $element.SqlEntity.Name table by#if($element.GetPrimaryKeyFields().Count == 1 && $element.GetPrimaryKeyFields().get_Item(0).Column.Identity) $element.GetPrimaryKeyFields().get_Item(0).Name#else a composite primary key#end.
	/// </summary>
	/// <param name=""></param>
	public static void Delete(#foreach( $field in $element.GetPrimaryKeyFields() )#if($velocityCount>1), #end$field.CreateMethodParameter()#end) {
	    Delete(#foreach( $field in $element.GetPrimaryKeyFields() )#if($velocityCount>1), #end$field.GetFieldFormat()#end, null);
	}
	
	/// <summary>
	/// Deletes a record from the $element.SqlEntity.Name table by#if($element.GetPrimaryKeyFields().Count == 1 && $element.GetPrimaryKeyFields().get_Item(0).Column.Identity) $element.GetPrimaryKeyFields().get_Item(0).Name#else a composite primary key#end.
	/// </summary>
	/// <param name=""></param>
	public static void Delete(#foreach( $field in $element.GetPrimaryKeyFields() )#if($velocityCount>1), #end$field.CreateMethodParameter()#end, SqlTransaction transaction) {
	    // Create and execute the command
	    SqlCommand cmd = GetSqlCommand(CONNECTION_STRING_KEY, "$options.GetProcName($element.SqlEntity.Name, "Delete")", CommandType.StoredProcedure, COMMAND_TIMEOUT, transaction);

	    // Create and append the parameters
#foreach( $field in $element.GetPrimaryKeyFields() )
	    $field.CreateSqlParameter(false, false)#end
#if($element.GetPrimaryKeyFields().Count == 1 && $element.GetPrimaryKeyFields().get_Item(0).Column.Identity)

#end
	    // Execute the query and return the result
	    cmd.ExecuteNonQuery();
	    
	    // do not close the connection if it is part of a transaction
	    if (transaction == null) {
		cmd.Connection.Close();
	    }
	}
#end
#if($element.SqlEntity.GenerateSelectStoredProcScript)
##Not implemented
#end
#foreach($finder in $element.Finders)

	/// <summary>
#if($finder.Unique)
	/// Returns an object which matches the values for the fields specified.
#else
	/// Returns a list of objects which match the values for the fields specified.
#end
	/// </summary>
#parameterComments(true $finder.Fields "A field value to be matched.")
#if($finder.Unique)
	/// <returns>The object found.</returns>
#else
	/// <returns>The list of $options.GetDAOClassName($element.Name) objects found.</returns>
#end
#if($finder.Unique)
	/// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
#end
#if($finder.Unique)
#set($s=$options.GetDOClassName($element.Name))
#else
#set($s=$listtype)
#end
	public static $s ${finder.Name}(#parameterList(true $finder.Fields)#if($finder.Limit), Int32 limit#end) {
#if($finder.Expression == "")
	    String sql = "SELECT#if($finder.Limit) TOP $finder.Limit#end * FROM " + VIEW + " WHERE #foreach ($field in $finder.Fields)#if($velocityCount>1) AND #end$field.GetSqlAlias()=@$field.GetPropertyName().Replace(".", "_")#end#if($finder.Sort != "") ORDER BY $finder.Sort#end";
	    SqlCommand cmd = GetSqlCommand(CONNECTION_STRING_KEY, sql, CommandType.Text);
#foreach ($field in $finder.Fields)
	    cmd.Parameters.Add(new SqlParameter("@$field.GetPropertyName().Replace(".", "_")", SqlDbType.$field.GetSqlType().SqlDbType, $field.GetSqlType.Length, ParameterDirection.Input, false, 0, 0, "$field.GetPropertyName()", DataRowVersion.Proposed, $options.GetSqlConversion($field)));
#end
	    SqlDataReader dataReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);

#if($finder.Unique)
	    return GetDataObject(dataReader);
#else
	    return GetList(dataReader);
#end
#else
#if($finder.Sort != "")
	    OrderByClause sort = new OrderByClause("$finder.Sort");
#end
	    WhereClause filter = new WhereClause("$finder.Expression");
	    String sql = "Select #if($finder.Limit)top " + limit.ToString() + " #end* from " + VIEW + filter.FormatSql() + sort.FormatSql();
	    SqlCommand cmd = GetSqlCommand(CONNECTION_STRING_KEY, sql, CommandType.Text);
#foreach($field in $finder.Fields)
	    cmd.Parameters.Add(new SqlParameter("@$field.GetPropertyName().Replace(".", "_")", SqlDbType.$field.GetSqlType().SqlDbType, $field.GetSqlType.Length, ParameterDirection.Input, false, 0, 0, "$field.GetPropertyName()", DataRowVersion.Proposed, $options.GetSqlConversion($field)));
#end
	    SqlDataReader dataReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
#if($finder.Unique)
	    if (!dataReader.Read()) {
		dataReader.Close();
		throw new FinderException("$options.GetDOClassName($element.Name).$finder.Name found no rows.");
	    }
	    $options.GetDOClassName($element.Name) data = GetDataObjectFromReader(dataReader);
	    dataReader.Close();
	    return data;
#else
	    $listtype list = new #if($listtype=="IList")ArrayList#else$listtype#end(); 

	    while (dataReader.Read()) {
		list.Add(GetDataObjectFromReader(dataReader)); 
	    }
	    dataReader.Close();
	    return list;
#end
#end
	}
#end

	/// <summary>
	/// Get a new transaction for a connection that can be created from this classes connection string
	/// </summary>
	public static DaoTransaction GetNewTransaction(String transactionName) {
	    SqlConnection conn = GetSqlConnection(GetConnectionString(CONNECTION_STRING_KEY));
	    DaoTransaction transaction = new DaoTransaction(conn.BeginTransaction(transactionName));

	    return transaction;
	}

	/// <summary>
	/// Get a new transaction for a connection that can be created from this classes connection string
	/// </summary>
	public static DaoTransaction GetNewTransaction() {
	    SqlConnection conn = GetSqlConnection(GetConnectionString(CONNECTION_STRING_KEY));
	    DaoTransaction transaction = new DaoTransaction(conn.BeginTransaction());

	    return transaction;
	}
	
    }
}
#end