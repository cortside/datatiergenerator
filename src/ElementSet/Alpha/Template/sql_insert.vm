#*

        sql_delete.vm - default sql insert stored proc template (replaces SqlGenerator)

*###
#if($element.GenerateInsertStoredProcScript)
#set($at = '@')
if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[sp${element.Name}_Insert]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure [dbo].[sp${element.Name}_Insert]
GO

SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [sp${element.Name}_Insert]
#set($cols = 0)
#set($id = $element.GetIdentityColumn())
#foreach($column in $element.Columns)#if(!$column.ViewColumn && (!$column.Identity || $doBoth))#set($cols = $cols + 1)#if($cols>1),
#end	@$sql.RemoveInvalidChars(${column.Name})	${column.SqlType.Declaration}#end
#end


AS

INSERT INTO $sql.Escape($element.Name)
#set($cols = 0)
#foreach($column in $element.Columns)#if(!$column.Identity && !$column.ViewColumn)#if($cols==0)(#end#set($cols = $cols + 1)#if($cols>1),
#end	$sql.Escape(${column.Name})#end
#end
#if ($cols == 0)
DEFAULT VALUES
#else
)
#set($cols = 0)
VALUES (
#foreach($column in $element.Columns)#if(!$column.Identity && !$column.ViewColumn)#set($cols = $cols + 1)#if($cols>1),
#end	${at}$sql.RemoveInvalidChars(${column.Name})#end#end)
#end

if @@rowcount <> 1 or @@error!=0
    BEGIN
        RAISERROR  20000 'sp${element.Name}_Insert: Unable to insert new row into $element.Name table '
        RETURN(-1)
    END

return @@IDENTITY
GO

#if ($element.User.Length > 0)
grant execute on [sp${element.Name}_Insert] to [$element.User]
GO

#end
#end