##
##      dao.vm - default dao template for C#
##
##      NOTE: this template may have some screwy things in it to EXACTLY match the ouput of the 
##      DaoGenerator class.
##
#if(!$element.SqlEntity.Name.Equals(""))
#nameSpaces($options $element true)

using Spring2.DataTierGenerator.Attribute;

using StampinUp.Core.DAO;
using StampinUp.Core.Types;
using StampinUp.Core.Util;

namespace $options.GetDAONameSpace($element.Name) 
{
    public class $options.GetDAOClassName($element.Name) : $options.DaoBaseClass 
    {
        [Generate]
#if($element.SqlEntity.UseView)
        private static readonly String VIEW = "$element.SqlEntity.View";
#else
        private static readonly String TABLE = "[$element.SqlEntity.Name]";
#end

#if($element.SqlEntity.AllowInsert || $element.SqlEntity.AllowUpdate || $element.SqlEntity.AllowDelete)
        [Generate]
        private static readonly Int32 COMMAND_TIMEOUT = $element.SqlEntity.CommandTimeout;
#end
#set ($listtype="void")
#if($options.GenerateAllCollections)
#set ($listtype="${element.Name}List")
#else
#set ($listtype="IList")
#end

        /// <summary>
        /// Hash table mapping entity property names to sql code.
        /// </summary>
        [Generate]
        private static Hashtable propertyToSqlMap = new Hashtable();

        /// <summary>
        /// Initializes the static map of property names to sql expressions.
        /// </summary>
        [Generate]
        static ${options.GetDAOClassName($element.Name)}() 
        {
#foreach($field in $element.fields)
#if($field.Column.SqlType.Name.Length>0)
        propertyToSqlMap.Add("$field.GetMethodFormat()",@"$field.GetSqlExpression(true)");
#end
#end        
        }
        
        /// <summary>
        /// Creates a where clause object by mapping the given where clause text.  The text may reference
        /// entity properties which will be mapped to sql code by enclosing the property names in braces.
        /// </summary>
        /// <param name="whereText">Text to be mapped</param>
        /// <returns>WhereClause object.</returns>
        /// <exception cref="ApplicationException">When property name found in braces is not found in the entity.</exception>
        public static IWhere Where(String whereText)
        {
            return new WhereClause(ProcessExpression(propertyToSqlMap, whereText));
        }

        /// <summary>
        /// Creates a where clause object that can be used to create sql to find objects whose entity property value
        /// matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
        /// to the appropriate sql.
        /// </summary>
        /// <param name="propertyName">Entity property to be matched.</param>
        /// <param name="value">Value to match the property with</param>
        /// <returns>A WhereClause object.</returns>
        /// <exception cref="ApplicationException">When the property name passed is not found in the entity.</exception>
        public static IWhere Where(String propertyName, String value)
        {
            return new WhereClause(GetPropertyMapping(propertyToSqlMap, propertyName), value);
        }

        /// <summary>
        /// Creates a where clause object that can be used to create sql to find objects whose entity property value
        /// matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
        /// to the appropriate sql.
        /// </summary>
        /// <param name="propertyName">Entity property to be matched.</param>
        /// <param name="value">Value to match the property with</param>
        /// <returns>A WhereClause object.</returns>
        /// <exception cref="ApplicationException">When the property name passed is not found in the entity.</exception>
        public static IWhere Where(String propertyName, Int32 value)
        {
            return new WhereClause(GetPropertyMapping(propertyToSqlMap, propertyName), value);
        }

        /// <summary>
        /// Creates a where clause object that can be used to create sql to find objects whose entity property value
        /// matches the value passed.  Note that the propertyName passed is an entity property name and will be mapped 
        /// to the appropriate sql.
        /// </summary>
        /// <param name="propertyName">Entity property to be matched.</param>
        /// <param name="value">Value to match the property with</param>
        /// <returns>A WhereClause object.</returns>
        /// <exception cref="ApplicationException">When the property name passed is not found in the entity.</exception>
        public static IWhere Where(String propertyName, DateTime value)
        {
            return new WhereClause(GetPropertyMapping(propertyToSqlMap, propertyName), value);
        }

        /// <summary>
        /// Returns a list of all $element.Name rows.
        /// </summary>
        /// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
        /// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
        [Generate]
        public static $listtype GetList ()
        {   
            return GetList(null, null);
        }

        /// <summary>
        /// Returns a filtered list of $element.Name rows.
        /// </summary>
        /// <param name="whereClause">Filtering criteria.</param>
        /// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
        /// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
        [Generate]
        public static $listtype GetList (IWhere whereClause)
        { 
            return GetList(whereClause, null);
        }

        /// <summary>
        /// Returns an ordered list of $element.Name rows.  All rows in the database are returned
        /// </summary>
        /// <param name="orderByClause">Ordering criteria.</param>
        /// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
        /// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
        [Generate]
        public static $listtype GetList(IOrderBy orderByClause) 
        {
            return GetList(null, orderByClause);
        }

        /// <summary>
        /// Returns an ordered and filtered list of $element.Name rows.
        /// </summary>
        /// <param name="whereClause">Filtering criteria.</param>
        /// <param name="orderByClause">Ordering criteria.</param>
        /// <returns>List of $options.GetDOClassName($element.Name) objects.</returns>
        /// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found matching the where criteria.</exception>
        [Generate]
        public static $listtype GetList(IWhere whereClause, IOrderBy orderByClause) 
        { 
#if ($element.SqlEntity.UseView)
#if ($element.SqlEntity.DefaultDirtyRead)
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, VIEW, whereClause, orderByClause, true); 
#else
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, VIEW, whereClause, orderByClause); 
#end
#else
#if ($element.SqlEntity.DefaultDirtyRead)
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, TABLE, whereClause, orderByClause, true); 
#else
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, TABLE, whereClause, orderByClause); 
#end
#end            
            $listtype list = new #if($listtype == "IList")ArrayList#else$listtype#end(); 

            while (dataReader.Read()) 
            {
                list.Add(GetDataObjectFromReader(dataReader)); 
            }
            dataReader.Close();
            return list; 
        }

        /// <summary>
        /// Finds a $element.Name entity using it's primary key.
        /// </summary>
#parameterComments(true $element.GetPrimaryKeyFields() "A key field.")
        /// <returns>A $options.GetDOClassName($element.Name) object.</returns>
        /// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no entity exists with the specified primary key..</exception>
        [Generate]
        public static $options.GetDOClassName($element.Name) Load(#parameterList(true $element.GetPrimaryKeyFields())) 
        {
            WhereClause w = new WhereClause();
#foreach ($field in $element.GetPrimaryKeyFields())
            w.And("$field.Column.Name", $options.GetSqlConversion($field));
#end
#if ($element.SqlEntity.UseView)
#if ($element.SqlEntity.DefaultDirtyRead)
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, VIEW, w, null, true); 
#else
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, VIEW, w, null);
#end
#else
#if ($element.SqlEntity.DefaultDirtyRead)
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, TABLE, w, null, true); 
#else
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, TABLE, w, null);
#end
#end
            if (!dataReader.Read()) 
            {
                dataReader.Close();
                throw new FinderException("Load found no rows for $element.Name.");
            }
            $options.GetDOClassName($element.Name) data = GetDataObjectFromReader(dataReader);
            dataReader.Close();
            return data;
        }

        /// <summary>
        /// Builds a data object from the current row in a data reader..
        /// </summary>
        /// <param name="dataReader">Container for database row.</param>
        /// <returns>Data object built from current row.</returns>
        [Generate]
        private static $options.GetDOClassName($element.Name) GetDataObjectFromReader(SqlDataReader dataReader) 
        {
            $options.GetDOClassName($element.Name) data = new $options.GetDOClassName($element.Name)();
#foreach($field in $element.Fields)
#if($field.Column.SqlType.Name.Length>0)
            if (dataReader.IsDBNull(dataReader.GetOrdinal("$field.Column.Name"))) 
            {   
                data.${field.GetMethodFormat()} = ${field.Type.NullInstanceFormat};
            } 
            else 
            {
                data.$field.GetMethodFormat() = $options.GetReaderString($field);
            }
#end
#end

            return data;
        }
#if($element.SqlEntity.AllowInsert)

        /// <summary>
        /// Inserts a record into the $element.SqlEntity.Name table.
        /// </summary>
        /// <param name=""></param>
#set($s="void")
#if($element.ReturnWholeObject)
#set($s=$options.GetDOClassName($element.Name))
#else
#if($element.GetInsertReturnField())
#set($s=${element.GetInsertReturnField().Type.Name})
#end
#end
        [Generate]
        public static $s Insert($options.GetDOClassName($element.Name) data) 
        {
            // Create and execute the command
#set($s="Insert")
#if($element.PrepareForInsert)
            data = PrepareForInsert (data);
#end
#if($element.SqlEntity.GenerateInsertStoredProcScript)
            SqlCommand cmd = GetSqlCommand($element.SqlEntity.Key, "$options.GetProcName($element.SqlEntity.Name, $s)", CommandType.StoredProcedure,    COMMAND_TIMEOUT);
#if($element.GetIdentityField())
            SqlParameter rv = cmd.Parameters.Add("RETURN_VALUE", SqlDbType.Int);
            rv.Direction = ParameterDirection.ReturnValue;
#end
#else
            string sql = "Insert Into " +#if($element.SqlEntity.UseView) VIEW#else TABLE#end + "("
#foreach($field in $element.Fields)
#if(!$field.Column.ViewColumn && $field.Column.Name.Length > 0 && !$field.Column.Identity && !$field.Column.RowGuidCol)
                                           + "$field.Column.Name,"
#end                                                   
#end
                     ;
            sql = sql.Substring(0, sql.Length - 1) + ") values("
#foreach($field in $element.Fields)
#if(!$field.Column.ViewColumn && $field.Column.Name.Length > 0 && !$field.Column.Identity && !$field.Column.RowGuidCol)
                                           + "@$field.Column.Name,"
#end                                                   
#end
                     ;
            sql = sql.Substring(0, sql.Length - 1) + ")#if($element.GetIdentityField());select Scope_Identity() Id#end";        
            SqlCommand cmd = GetSqlCommand($element.SqlEntity.Key, sql, CommandType.Text, COMMAND_TIMEOUT);
#end                                           
            //Create the parameters and append them to the command object
#foreach($field in $element.Fields)
#if(!$field.Column.ViewColumn && $field.Column.Name.Length>0 && !$field.Column.Identity && !$field.Column.RowGuidCol)            $field.CreateSqlParameter(false, true)#end
#end

            // Execute the query
#if($element.SqlEntity.GenerateInsertStoredProcScript || !$element.GetIdentityField())
            cmd.ExecuteNonQuery();
#else
            SqlDataReader returnValue = cmd.ExecuteReader();
            returnValue.Read();
            int returnId = (int)(returnValue.GetDecimal(0));
            returnValue.Close();
#end
#if($element.ReturnWholeObject)
            // Return the whole object
            return data;
#else
#if($element.GetIdentityField())
            // Set the output paramter value(s)
#if($element.SqlEntity.GenerateInsertStoredProcScript)
            return $options.GetProcedureReturnString($element.GetIdentityField());
#else
            return $options.GetSelectIdentityString($element.GetIdentityField());
#end
#else
#if($element.GetInsertReturnField())
            // Return field designated
            return data.${element.GetInsertReturnField().GetMethodFormat()};
#end
#end
#end
        }
#end
#if($element.SqlEntity.HasUpdatableColumns() && $element.SqlEntity.AllowUpdate)

        /// <summary>
        /// Updates a record in the $element.SqlEntity.Name table.
        /// </summary>
        /// <param name=""></param>
        [Generate]
        public static void Update($options.GetDOClassName($element.Name) data) 
        {
            // Create and execute the command
#set($s="Update")
#if($element.DoLog || $element.SqlEntity.UpdateChangedOnly)
            $options.GetDOClassName($element.Name) oldData = Load (#foreach($field in $element.GetPrimaryKeyFields)#if($velocityCount > 1),#end data.$field.GetMethodFormat()#end);
#end
#if($element.SqlEntity.GenerateUpdateStoredProcScript)
            SqlCommand cmd = GetSqlCommand($element.SqlEntity.Key, "$options.GetProcName($element.SqlEntity.Name, $s)", CommandType.StoredProcedure,    COMMAND_TIMEOUT);
#else
#if($element.SqlEntity.UseView)
            string sql = "Update " + VIEW + " set ";
#else
            string sql = "Update " + TABLE + " set ";
#end
#foreach($field in $element.Fields)
#if(!$field.Column.ViewColumn && $field.Column.Name.Length > 0 && !$field.Column.Identity && !$field.Column.RowGuidCol)
#if($element.SqlEntity.UpdateChangedOnly)
            if (!oldData.${field.GetMethodFormat()}.Equals(data.$field.GetMethodFormat()))
            {
                sql = sql + "$field.Column.Name=@$field.Column.Name,";
            }
#else
            sql = sql + "$field.Column.Name=@$field.Column.Name,";
#end
#end
#end
            WhereClause w = new WhereClause();
#foreach ($field in $element.GetPrimaryKeyFields())
            w.And("$field.Column.Name", data.${field.GetMethodFormat()}.DBValue);
#end
            sql = sql.Substring(0,sql.Length - 1) + w.FormatSql();
            SqlCommand cmd = GetSqlCommand($element.SqlEntity.Key, sql, CommandType.Text, COMMAND_TIMEOUT);
#end
            //Create the parameters and append them to the command object
#foreach($field in $element.Fields)
#if($element.DoLog && $field.DoLog && !$field.Column.ViewColumn && $field.Column.Name.Length>0)
            if (!oldData.${field.GetMethodFormat()}.Equals(data.$field.GetMethodFormat()))
            {
                Logger.Instance.Update ("${element.SqlEntity.Name}.$field.Column.Name", "$field.Column.Name", oldData.${field.GetMethodFormat()}, data.${field.GetMethodFormat()});
            }
#end
#if($element.SqlEntity.UpdateChangedOnly)
#if(!$field.Column.ViewColumn && $field.Column.Name.Length>0)
            if (!oldData.${field.GetMethodFormat()}.Equals(data.$field.GetMethodFormat()))
            {
                $field.CreateSqlParameter(false, true)
            }
#end
#else
#if(!$field.Column.ViewColumn && $field.Column.Name.Length>0)            $field.CreateSqlParameter(false, true)#end
#end
#end

            // Execute the query
            if (cmd.Parameters.Count > 0)
            {
                cmd.ExecuteNonQuery();
            }
        }
#end
#if($element.SqlEntity.AllowDelete)

        /// <summary>
        /// Deletes a record from the $element.SqlEntity.Name table by#if($element.GetPrimaryKeyFields().Count == 1 && $element.GetPrimaryKeyFields().get_Item(0).Column.Identity) $element.GetPrimaryKeyFields().get_Item(0).Name#else a composite primary key#end.
        /// </summary>
        /// <param name=""></param>
        [Generate]
        public static void Delete(#foreach( $field in $element.GetPrimaryKeyFields() )#if($velocityCount>1), #end$field.CreateMethodParameter()#end) 
        {
            // Create and execute the command
#if($element.SqlEntity.GenerateInsertStoredProcScript)
            SqlCommand cmd = GetSqlCommand($element.SqlEntity.Key, "$options.GetProcName($element.SqlEntity.Name, "Delete")", CommandType.StoredProcedure, COMMAND_TIMEOUT);
            // Create and append the parameters
#foreach( $field in $element.GetPrimaryKeyFields() )
            $field.CreateSqlParameter(false, false)#end
#if($element.GetPrimaryKeyFields().Count == 1 && $element.GetPrimaryKeyFields().get_Item(0).Column.Identity)

#end
#else
#if($element.SqlEntity.UseView)
            string sql = "Delete From " + VIEW;
#else
            string sql = "Delete From " + TABLE;
#end
            WhereClause w = new WhereClause();
#foreach ($field in $element.GetPrimaryKeyFields())
            w.And("$field.Column.Name", $options.GetSqlConversion($field));
#end
            sql += w.FormatSql();
            SqlCommand cmd = GetSqlCommand($element.SqlEntity.Key, sql, CommandType.Text, COMMAND_TIMEOUT);
#end

            // Execute the query and return the result
            cmd.ExecuteNonQuery();
        }
#end
#if($element.SqlEntity.GenerateSelectStoredProcScript)
##Not implemented
#end

#if($element.Finders.Count > 0)

#end
#foreach($finder in $element.Finders)
        /// <summary>
#if($finder.Unique)
        /// Returns an object which matches the values for the fields specified.
#else
        /// Returns a list of objects which match the values for the fields specified.
#end
        /// </summary>
#parameterComments(true $finder.Fields "A field value to be matched.")
#if($finder.Unique)
        /// <returns>The object found.</returns>
#else
        /// <returns>The list of $options.GetDAOClassName($element.Name) objects found.</returns>
#end
        /// <exception cref="Spring2.Core.DAO.FinderException">Thrown when no rows are found.</exception>
#if($finder.Unique)
#set($s=$options.GetDOClassName($element.Name))
#else
#set($s=$listtype)
#end
        [Generate]
        public static $s ${finder.Name}(#parameterList(true $finder.Fields)) 
        {
#if($finder.Sort != "")
        OrderByClause sort = new OrderByClause("$finder.Sort");
#end
#if($finder.Expression == "")
            WhereClause filter = new WhereClause();
#foreach($field in $finder.Fields)
            filter.And("$field.GetSqlExpression()", $options.GetSqlConversion($field));
#end
#if($finder.Unique)
#if ($element.SqlEntity.UseView)
#if ($element.SqlEntity.DefaultDirtyRead)
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, VIEW, filter, sort, true); 
#else
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, VIEW, filter, sort);
#end
#else
#if ($element.SqlEntity.DefaultDirtyRead)
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, TABLE, filter, sort, true); 
#else
            SqlDataReader dataReader = GetListReader($element.SqlEntity.Key, TABLE, filter, sort);
#end
#end
            
            if (!dataReader.Read()) 
            {
                dataReader.Close();
                throw new FinderException("$options.GetDOClassName($element.Name).$finder.Name found no rows.");
            }
            $options.GetDOClassName($element.Name) data = GetDataObjectFromReader(dataReader);
            dataReader.Close();
            return data;
#else

            return GetList(filter, sort);
#end
#else
        WhereClause filter = new WhereClause("$finder.Expression");
        SqlCommand cmd = GetSqlCommand($element.SqlEntity.Key, "Select * from " +#if($element.SqlEnity.UseView) VIEW#else TABLE#end#if($element.SqlEntity.DefaultDirtyRead) + "(nolock)"#end + filter.FormatSql(), CommandType.Text);
#foreach($field in $finder.Fields)
        cmd.Parameters.Add(new SqlParameter("@$field.GetPropertyName()", SqlDbType.$field.GetSqlType().SqlDbType, $field.GetSqlType.Length, ParameterDirection.Input, false, 0, 0, "$field.GetPropertyName()", DataRowVersion.Proposed, $options.GetSqlConversion($field)));
#end
        SqlDataReader dataReader = cmd.ExecuteReader();
#if($finder.Unique)
        if (!dataReader.Read()) {
            dataReader.Close();
            throw new FinderException("$options.GetDOClassName($element.Name).$finder.Name found no rows.");
        }
        $options.GetDOClassName($element.Name) data = GetDataObjectFromReader(dataReader);
        dataReader.Close();
        return data;
#else
        $listtype list = new #if($listtype=="IList")ArrayList#else$listtype#end(); 

        while (dataReader.Read()) 
        {
            list.Add(GetDataObjectFromReader(dataReader)); 
        }
        dataReader.Close();
        return list;
#end
#end
        }

#end
#if($element.PrepareForInsert)
        private static $options.GetDOClassName($element.Name) PrepareForInsert($options.GetDOClassName($element.Name) data)
        {
            return data;
        }
#end
    }
}
#end
