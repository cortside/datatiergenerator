#*

        sql_table.vm - default sql table template (replaces SqlGenerator.CreateTable)

*###
#if($element.GenerateSqlTableScripts)
###if ($element.Description.Length>0)
##/*
##$element.Description
##*/
##
###end
## initial table script - if table does not already exist
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

if exists (select * from tempdb..sysobjects where name like '#spAlterColumn%' and xtype='P')
drop procedure #spAlterColumn
GO

CREATE PROCEDURE #spAlterColumn
    @table varchar(100),
    @column varchar(100),
    @type varchar(50),
    @required bit
AS
if exists (select * from syscolumns where name=@column and id=object_id(@table))
begin
	declare @nullstring varchar(8)
	set @nullstring = case when @required=0 then 'null' else 'not null' end
	exec('alter table [' + @table + '] alter column [' + @column + '] ' + @type + ' ' + @nullstring)
end
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[$element.Name]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
CREATE TABLE $sql.Escape($element.Name) (
#foreach ($column in $element.Columns)
#if (!$column.ViewColumn)
#if ($velocityCount>1),
#end
	$sql.Escape($column.Name) ${column.SqlType.Declaration}#if ($column.Identity) IDENTITY($column.Seed,$column.Increment)#end#if ($column.RowGuidCol) ROWGUIDCOL#end#if ($column.Identity || $column.Required || $column.RowGuidCol || $column.Default.Length>0) NOT#end NULL#if ($column.Default.Length>0) CONSTRAINT [DF_${element.Name}_$column.Name] DEFAULT ($column.Default)#end
#end
#end

)
GO

## create alter table scripts for each column - don't know when they got added
#foreach ($column in $element.Columns)
#if (!$column.ViewColumn)
if not exists(select * from syscolumns where id=object_id('$sql.Escape($element.Name)') and name = '$column.Name')
  BEGIN
	ALTER TABLE $sql.Escape($element.Name) ADD
	    $sql.Escape($column.Name) $column.SqlType.Declaration#if ($column.Identity) IDENTITY($column.Seed,$column.Increment)#end#if ($column.RowGuidCol) ROWGUIDCOL#end#if ($column.Identity || $column.Required || $column.RowGuidCol || $column.Default.Length>0) NOT#end NULL
#if ($column.Default.Length>0)
	CONSTRAINT
	    [DF_${element.Name}_$column.Name] DEFAULT $column.Default WITH VALUES
#end
  END
GO
#if (!$column.SqlType.Declaration.Equals("text") && !$column.SqlType.Declaration.Equals("timestamp"))

if exists(select * from syscolumns where id=object_id('$sql.Escape($element.Name)') and name = '$column.Name')
  BEGIN
#if($column.Default.Length>0)
	declare @cdefault varchar(1000)
	select @cdefault = '[' + object_name(cdefault) + ']' from syscolumns where id=object_id('${element.Name}') and name = '$column.Name'

	if @cdefault is not null
		exec('alter table $sql.Escape($element.Name) DROP CONSTRAINT ' + @cdefault)
		
	if exists(select * from sysobjects where name = 'DF_${element.Name}_$column.Name' and xtype='D')
          begin
            declare @table sysname
            select @table=object_name(parent_obj) from  sysobjects where (name = 'DF_${element.Name}_$column.Name' and xtype='D')
            exec('alter table ' + @table + ' DROP CONSTRAINT [DF_${element.Name}_$column.Name]')
          end
	
#if($column.Required)
	update $sql.Escape($element.Name) set $sql.Escape($column.Name) = $column.Default where $sql.Escape($column.Name) IS NULL
#end
#end
	exec #spAlterColumn '$element.Name', '$column.Name', '$column.SqlType.Declaration',#if ($column.Required) 1#else 0#end

#if($column.Default.Length>0)
	if not exists(select * from sysobjects where name = 'DF_${element.Name}_$column.Name' and xtype='D')
		alter table $sql.Escape($element.Name)
			ADD CONSTRAINT [DF_${element.Name}_$column.Name] DEFAULT $column.Default FOR $sql.Escape($column.Name) WITH VALUES
#end  
  END
#end
GO

#end
#end
## create constraints, checking for existance
#foreach ($constraint in $element.Constraints)
if not exists (select * from dbo.sysobjects where id = object_id(N'$sql.Escape($constraint.Name)') and OBJECTPROPERTY(id, N'#if ($constraint.Type.ToUpper().Equals("PRIMARY KEY"))IsPrimaryKey#elseif($constraint.Type.ToUpper().Equals("FOREIGN KEY"))IsForeignKey#elseif($constraint.Type.ToUpper().Equals("UNIQUE"))IsUniqueCnst#elseif($constraint.Type.ToUpper().Equals("CHECK"))IsCheckCnst#end') = 1)
ALTER TABLE $sql.Escape($element.Name)#if ($constraint.Type.ToUpper().Equals("PRIMARY KEY")) WITH NOCHECK#end ADD
#if (!$constraint.Type.ToUpper().Equals("CHECK"))
	CONSTRAINT $sql.Escape($constraint.Name) $constraint.Type#if($constraint.Type.ToUpper().Equals("PRIMARY KEY"))#if($constraint.Clustered) CLUSTERED#else NONCLUSTERED#end#end

	(
#foreach ($column in $constraint.Columns)
#if ($velocityCount>1),
#end
		$sql.Escape($column.Name)
#end
	)
#if ($constraint.Type.ToUpper().Equals("FOREIGN KEY"))
	REFERENCES $sql.Escape($constraint.ForeignEntity.Name)
	(
#foreach ($column in $constraint.Columns)
#if ($velocityCount>1),
#end
		$sql.Escape($column.ForeignColumn)
#end
	)
#end
#else
	CONSTRAINT $sql.Escape($constraint.Name) CHECK $constraint.CheckClause
#end
GO

#end
## create indexes, checking for existance
#foreach ($index in $element.Indexes)
if not exists (select * from sysindexes where name='$index.Name' and id=object_id(N'[$element.Name]'))
	CREATE#if ($index.Unique) UNIQUE#end#if($index.Clustered) CLUSTERED#end INDEX $sql.Escape($index.Name) ON $sql.Escape($element.Name)
	(
#foreach ($column in $index.Columns)
        	$sql.Escape($column.Name)#if($column.SortDirection.Length>0)$column.SortDirection#end#if($velocityCount!=$index.Columns.Count),#end
#end

	)
GO
#end
#if ($element.User.Length > 0)

grant all on $sql.Escape($element.Name) to [$element.User]
GO
#end
#end
