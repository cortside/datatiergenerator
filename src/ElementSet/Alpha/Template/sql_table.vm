#*

        sql_table.vm - default sql table template (replaces SqlGenerator.CreateTable)

*###
#if($element.GenerateSqlTableScripts)
#if ($element.Description.Length>0)
/*
$$elementDescription).Append("
*/

#end
## initial table script - if table does not already exist
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO

if exists (select * from tempdb..sysobjects where name like '#spAlterColumn%' and xtype='P')
drop procedure #spAlterColumn
GO

CREATE PROCEDURE #spAlterColumn
    @table varchar(100),
    @column varchar(100),
    @type varchar(50),
    @required bit
AS
if exists (select * from syscolumns where name=@column and id=object_id(@table))
begin
	declare @nullstring varchar(8)
	set @nullstring = case when @required=0 then 'null' else 'not null' end
	exec('alter table ' + @table + ' alter column ' + @column + ' ' + @type + ' ' + @nullstring)
end
GO

if not exists (select * from dbo.sysobjects where id = object_id(N'[$element.Name]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
CREATE TABLE $sql.Escape($element.Name) (
#foreach ($column in $element.Columns)
#if (!$column.ViewColumn)
#if ($velocityCount>1),
#end
	$sql.Escape($column.Name) ${column.SqlType.Declaration}#if ($column.Identity) IDENTITY($column.Seed,$column.Increment)#end#if ($column.RowGuidCol) ROWGUIDCOL#end#if ($column.Identity || $column.Required || $column.RowGuidCol || $column.Default.Length>0) NOT#end NULL#if ($column.Default.Length>0) CONSTRAINT [DF_${element.Name}_$column.Name] DEFAULT ($column.Default)#end
#end
#end

)
GO

## create alter table scripts for each column - don't know when they got added
#foreach ($column in $element.Columns)
#if (!$column.ViewColumn)
if not exists(select * from syscolumns where id=object_id('$sql.Escape($element.Name)') and name = '$column.Name')
  BEGIN
#if ($column.Required && $column.Default.Length==0 && !$column.Identity)
	select '$column.Name will not be added becuase it has not default and is required'
	/* -- commented out because column does not have default value and is required
#end
	ALTER TABLE $sql.Escape($element.Name) ADD
	    $sql.Escape($column.Name) $column.SqlType.Declaration#if ($column.Identity) IDENTITY($column.Seed,$column.Increment)#end#if ($column.RowGuidCol) ROWGUIDCOL#end#if ($column.Identity || $column.Required || $column.RowGuidCol || $column.Default.Length>0) NOT#end NULL
#if ($column.Default.Length>0)
	CONSTRAINT
	    DF_${element.Name}_$column.Name DEFAULT $column.Default WITH VALUES
#end
#if ($column.Required && $column.Default.Length==0 && !$column.Identity)
	*/
#end
  END
#if (!$column.SqlType.Declaration.Equals("text") && !$column.SqlType.Declaration.Equals("timestamp"))
else
  BEGIN
	exec #spAlterColumn '$sql.Escape($element.Name)', '$sql.Escape($column.Name)', '$column.SqlType.Declaration',#if ($column.Required) 1#else 0#end

  END
#end
GO

#end
#end
## create constraints, checking for existance
#foreach ($constraint in $element.Constraints)
#if (!$constraint.Type.ToUpper().Equals("CHECK"))
if not exists (select * from dbo.sysobjects where id = object_id(N'$sql.Escape($constraint.Name)') and OBJECTPROPERTY(id, N'#if ($constraint.Type.ToUpper().Equals("PRIMARY KEY"))IsPrimaryKey#elseif($constraint.Type.ToUpper().Equals("FOREIGN KEY"))IsForeignKey#elseif($constraint.Type.ToUpper().Equals("UNIQUE"))IsUniqueCnst#end') = 1)
ALTER TABLE $sql.Escape($element.Name)#if ($constraint.Type.ToUpper().Equals("PRIMARY KEY")) WITH NOCHECK#end ADD
	CONSTRAINT $sql.Escape($constraint.Name) $constraint.Type#if($constraint.Type.ToUpper().Equals("PRIMARY KEY"))#if($constraint.Clustered) CLUSTERED#else NONCLUSTERED#end#end

	(
#foreach ($column in $constraint.Columns)
#if ($velocityCount>1),
#end
		$sql.Escape($column.Name)
#end
	)
#if ($constraint.Type.ToUpper().Equals("FOREIGN KEY"))
	REFERENCES $sql.Escape($constraint.ForeignEntity)
	(
#foreach ($column in $constraint.Columns)
#if ($velocityCount>1),
#end
		$sql.Escape($column.ForeignColumn)
#end
	)
#end
GO

#end
#end
## create indexes, checking for existance
#foreach ($index in $element.Indexes)
if not exists (select * from sysindexes where name='$index.Name' and id=object_id(N'[$element.Name]'))
	CREATE#if ($index.Unique) UNIQUE#end INDEX $sql.Escape($index.Name) ON $sql.Escape($element.Name)
	(
#foreach ($column in $index.Columns)
        	$sql.Escape($column.Name)#if($column.SortDirection.Length>0)$column.SortDirection#end#if($velocityCount!=$index.Columns.Count),#end
#end

	)
GO
#end
#end
